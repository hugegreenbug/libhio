#----------------------------------------------------------------------------
# run_setup - common setup for hio tests 
# Source this file from each test script.
#
# Env vars used for input:
#   BUILD_TREE - location of HIO build tree, defaults to $PWD/..
#
# BASH variables set that can be used by test script:
#        root - data root for test, created or emptied
#        size - gross size of IO, per rank t|s|m|l|x|y|z
#       ranks - number of MPI ranks
#    verbose_lev - xexec2 verbosity level
#   debug_lev - xexec2 debug level
#   HIO_TEST_ROOT - if not set, will be set to default data root string  
#
# BASH functions that can be called by the test script:
#   clean_roots - creates or empties out specified data roots
#           cmd - logs and runs a command
#           msg - logs a message
#         myrun - issues mpirun or aprun command with -n specified 
#
#----------------------------------------------------------------------------
synexit() {
  echo ""
  if [[ -n $* ]]; then echo "Error: $*"; echo ""; fi
  echo "run_setup - common setup for hio tests"
  echo ""
  echo "  Syntax:"
  echo "    $0"
  echo "        [-s <size>]]"
  echo "        [-r <num_ranks>]"
  echo "        [-n <num_nodes>]"
  echo "        [-p <ppn>]"
  echo "        [-v <verbose_level>]"
  echo "        [-d <debug_level>]"
  echo "        [-b] [-c] [-a]"
  echo "        [-w <dw_alloc>]"
  echo "        [-x <dw_alloc_pct>]"
  echo "        [-m <msub args>]"
  echo ""
  echo "  Options:"   
  echo "    -s <size>         Per rank run size t|s|m|l|x|y|z  (default s)"
  echo "       <totsz>[,<blksz>][,<nseg>]  where:"
  echo "                      totsz - total size per rank in MiB"
  echo "                      blksz - size of each write/read in KiB" 
  echo "                      nseg - number of segments (not used by all tests)"
  echo "    -r <num_ranks>    Number of MPI ranks.  Default is all allocated"
  echo "                      PEs or 2 on Mac OS"
  echo "    -n <num_nodes>    Number of nodes.  Default is all allocated nodes"
  echo "                      or 2 or 1 on Mac OS"
  echo "    -p <ppn>          PEs per node.  If specified with -n and -r, must agree"
  echo "    -v <verbose_lev>  Verbosity level for xexec2, default 1"
  echo "    -d <debug_lev>    Debug level for xexec2, default 0"
  echo "    -b                Submit batch job with these options"
  echo "    -c                Chain jobs - make this job dependant on previous job"
  echo "    -a                Clean dirs After running" 
  echo "    -w <dw_alloc>     DataWarp allocation policy 0=never, 1=static, 2=Moab"
  echo "    -x <dw_alloc_pct> Multiply any requested allocation by this percentage"
  echo "    -m                Additional arguments for msub (use with -b)"
  echo ""
  echo "  Cornell Wright  cornell@lanl.gov"
  
  exit 8
}

#----------------------------------------------------------------------------
# Functions for run_setup and test scripts to use
#----------------------------------------------------------------------------
cmd() {
  echo "$host ---> $*"
  eval "$*"
  return $?         
}

msglog=""
msg() { 
  echo "$host $*" 
  if [[ -n $msglog ]]; then echo "$host $*" >> $msglog; fi
}

errx() {
  msg "Error: $*; Exitting"
  exit 12
}

cvt() {
    if [[ $(( $1 / $cons_ti )) -gt 99 ]]; then echo "$(( $1 / $cons_ti )) Ti"
  elif [[ $(( $1 / $cons_gi )) -gt 99 ]]; then echo "$(( $1 / $cons_gi )) Gi"
  elif [[ $(( $1 / $cons_mi )) -gt 99 ]]; then echo "$(( $1 / $cons_mi )) Mi"
  elif [[ $(( $1 / $cons_ki )) -gt 99 ]]; then echo "$(( $1 / $cons_ki )) Ki"
  else echo "$1"
  fi
}

# Function to check max_rc and output a summary message
check_rc(){
  if [[ $max_rc > 0 ]]; then result="FAILURE"
  else result="SUCCESS"; fi
  jobend=`date "$datefmt"`
  echo "###############################################################################"
  echo "Start: $jobstart  End: $jobend  Test: $0 -s $size -n $nodes -r $ranks   RESULT: $result"
  echo "###############################################################################"
}

# Function to build run script and submit batch job if batch mode
batch_sub() {
  # Save DataWarp required capacity with 5% + 1GiB  overhead and rounded up to next GiB
  dw_cap="$(( (($1 * 21 / 20 * $dw_alloc_pct / 100) + (1 * $cons_gi) + ($cons_gi - 1) ) / $cons_gi ))GiB"
  msg "DataWarp Capacity: $dw_cap"
  if [[ $batch -gt 0 ]]; then
    rundir="$PWD/run"
    if [[ ! -d $rundir ]]; then cmd "mkdir -p $rundir"; fi
    lastjob="$rundir/last_jobid"

    # Ensure unique job name
    jobname=`date +%Y%m%d.%H%M%S.%N`
    jobsh="$rundir/job.$jobname.sh"
    while [[ -e $jobsh ]]; do
      msg "File $jobsh already exists, trying another"
      jobname=`date +%Y%m%d.%H%M%S.%N`
      jobsh="$rundir/job.$jobname.sh"
    done
    jobout="$rundir/job.$jobname.out"
    msglog="$rundir/job.$jobname.jobid"
    msg "run_setup: `date \"$datefmt\"` Job $jobname $args" 

    echo "#! /bin/bash" > $jobsh
    echo "#MSUB -l nodes=$nodes:ppn=$ppn" >> $jobsh
    echo "#MSUB -l walltime=4:00:00" >> $jobsh
    echo "#MSUB -o $jobout -joe" >> $jobsh
    echo "#MSUB -d $PWD" >> $jobsh
    if [[ $dw_alloc_mode -eq 2 ]]; then
      echo "#DW jobdw access_mode=striped type=scratch capacity=$dw_cap" >> $jobsh
    fi
    echo "echo \"\`date \"$datefmt\"\` Job $jobname start\"" >> $jobsh
    echo "echo \"\"" >> $jobsh
    echo "echo \"$jobsh:\"" >> $jobsh
    echo "cat $jobsh" >> $jobsh
    echo "echo \"\"" >> $jobsh

    afterparm=""
    if [[ $after -gt 0 ]]; then afterparm="-a"; fi
    echo "$0 -s $size $afterparm -w $dw_alloc_mode -v $verbose_lev -d $debug_lev" >> $jobsh

    echo "echo \"\`date \"$datefmt\"\` Job $jobname   end\"" >> $jobsh

    mcmd="msub"
    IFS=","; hiovars=${!HIO_*}; unset IFS
    if [[ -n $hiovars ]]; then mcmd="$mcmd -v $hiovars"; fi
    if [[ -n $msub_arg ]]; then mcmd="$mcmd $msub_arg"; fi
    if [[ $chain -ne 0 ]]; then
      if [[ -r $lastjob ]]; then
        read lastjobid < $lastjob
        # Create array, extract last element for multi-id DataWarp jobs
        lastjobid=($lastjobid)
        lastjobid=${lastjobid[ ${#lastjobid[*]}-1 ]}
        mcmd="$mcmd -l depend=$lastjobid"
      else
        msg "Last jobid file \"$lastjob\" not readable, ignoring chain option"
      fi
    fi
    mcmd="$mcmd $jobsh" 
    msg "run_setup: ---> $mcmd"
    msub_msg=`$mcmd 2>&1`
        
    shopt -s nocasematch
    if [[ $msub_msg == *error* || $msub_msg == *warn* || $msub_msg = *fail* ]]; then
      msg "run_setup: msub error: $msub_msg"
    else 
      jobid=${msub_msg#$'\n'}
      echo "$jobid" > $lastjob
      msg "run_setup: `date \"$datefmt\"` job $jobname ID: $jobid submitted"
    fi 
    shopt -u nocasematch
    msglog=""
    if [[ $batch -eq 1 ]]; then exit; fi
  fi
}

# This string contains the logic to check, empty or create a test data root
# directory.  It needs to be executed on a compute node via aprun for datawarp.
# It's also used for locally accessible directories for the sake of consistency.
clean_cmd="
  if [[ -z \$0 ]]; then
    echo \"run_setup: zero length test root name0\"
    exit
  fi
  if [ -e \$0 ]; then
    if [ -d \$0 ]; then
      if [ ! -w \$0 ]; then
        echo \"run_setup: Unable to write to test root \$0\"
        exit
      else
        echo \"---> rm -fR \$0/*\"
        rm -fR \$0/*
      fi
    else
      echo \"run_setup: Test root \$0 exists and is not a directory\"
      exit
    fi
  else
    echo \"---> mkdir -p \$0\"
    mkdir -p \$0
  fi
"

# Function to clean data roots, i.e., create or empty them out 
clean_roots() {
  allroots=${1-$HIO_TEST_ROOTS}
  IFS=","; read -ra root <<< "$allroots"; unset IFS
  for r in "${root[@]}"; do
    shopt -s nocasematch
    if [[ "$r" == "dw" || "$r" == "datawarp" ]]; then
      clean=""
      if [[ -n $DW_JOB_STRIPED    ]]; then clean=$DW_JOB_STRIPED; fi
      if [[ -n $HIO_datawarp_root ]]; then clean=$HIO_datawarp_root; fi
      if [[ -n $clean ]]; then
        msg "Cleaning: \"$r\""
        msg "===> aprun bash -c \$clean_cmd $clean"
        aprun -n 1 -b bash -c "$clean_cmd" $clean
      fi
    elif [[ ${r:0:6} == "posix:" ]]; then
      msg "Cleaning: \"$r\""
      r=${r:6}
      # r=${r%"/"}
      # last=${r##*/}
      if [[ $r == ${r/test} ]]; then
        msg "Warning: skipping clean of non-test directory \"$r\""
      else
        bash -c "$clean_cmd" $r
      fi
    else
      errx "data root \"$r\" type not recognized."
    fi 
    shopt -u nocasematch
  done
}

# function to invoke mpi on various platforms - sets max_rc
myrun() {
  #export LD_DEBUG=all
  #export LD_DEBUG_OUTPUT=/lustre/scratch5/cornell/ld_debug/ldd.out
  #msg "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"
  cmd "$mympicmd -n $ranks $*"
  rc=$?
  #unset LD_DEBUG
  #unset LD_DEBUG_OUTPUT
  max_rc=$((rc > max_rc ? rc : max_rc))
  return $rc
}

#----------------------------------------------------------------------------
# Parse arguments and other common setup
#----------------------------------------------------------------------------
datefmt="+%Y-%m-%d %H:%M:%S"
jobstart=`date "$datefmt"`
host=`hostname -s`
hostpre=${HOST:0:3}
max_rc=0
verbose_lev=1
debug_lev=0
batch=0
chain=0
after=0
dw_alloc_pct=100

size="s"
job_dir=""
# Platform specific defaults
if [[ ${OSTYPE:0:6} == "darwin" ]]; then
  mympicmd="mpirun"
  dw_alloc_mode=0
else
  size="m"
  type aprun > /dev/null 2>&1
  if [[ $? -eq 0 ]]; then
    # aprun available - must be a Cray
    mympicmd="aprun"
    size="m"
    if [[ -n $PBS_JOBID ]]; then
      set | egrep "^PBS|^DW|^HOST|^HIO"
      job_dir="/${PBS_JOBID%%.*}"
    fi
    if [[ -n $PBS_NODEFILE ]]; then 
      echo ""
      cmd "cat $PBS_NODEFILE | sort | uniq | pr -t --columns 8"
    fi
    if [[ -n $DW_JOB_STRIPED ]]; then
      . $MODULESHOME/init/bash
      module load dws
      echo ""
      cmd "dwstat all"
    fi
  else
    # aprun not available - use mpirun
    mympicmd="mpirun"
    if [[ -n $SLURM_JOB_ID ]]; then
      set | egrep "^SLURM|^DW"
      job_dir="/$SLURM_JOB_ID"
    fi
  fi
  if [[ $hostpre == "ga-" || $hostpre == "tr-" ]]; then
    dw_alloc_mode=2
  elif [[ $hostpre == "tt-" ]]; then
    dw_alloc_mode=1
  else
    dw_alloc_mode=0
  fi 
fi

args="$0 $*"
while getopts "hs:r:n:p:v:d:bcw:ax:m:" optname; do
  case $optname in
    h ) synexit;;
    s ) size=$OPTARG;;
    r ) ranks=$OPTARG;;
    n ) nodes=$OPTARG;;
    p ) ppn=$OPTARG;;
    v ) verbose_lev=$OPTARG;;
    d ) debug_lev=$OPTARG;;
    b ) batch=1;;
    c ) chain=1;;
    w ) dw_alloc_mode=$OPTARG;;
    a ) after=1;;
    x ) dw_alloc_pct=$OPTARG;;
    m ) msub_arg=$OPTARG;;
   \? ) synexit "invalid option";;
  esac
done
shift $((OPTIND - 1 ))
if [[ -n $1 ]]; then synexit "extra parameters"; fi

# Figure out nodes, ranks and ppn
until [[ -n $nodes && -n $ranks && -n $ppn ]]; do
  # Two parm cases -- calc third parm
  if   [[ -n $nodes && -n $ranks ]]; then   ppn=$(( $ranks / $nodes ))   
  elif [[ -n $nodes && -n $ppn ]];   then ranks=$(( $nodes * $ppn   ))   
  elif [[ -n $ranks && -n $ppn ]];   then nodes=$(( $ranks / $ppn   ))
  # Nodes only specified, determine ppn and iterate
  elif [[ -n $nodes ]]; then
    if   [[ -n $PBS_NUM_PPN ]]; then ppn=$PBS_NUM_PPN
    elif [[ -n $SLURM_NTASKS_PER_NODE ]]; then ppn=$SLURM_NTASKS_PER_NODE
    elif [[ ${OSTYPE:0:6} == "darwin" ]]; then ppn=2
    else                                       ppn=2
    fi
  # Ranks only specified, determine nodes and iterate
  elif [[ -n ranks ]]; then
    if   [[ -n $PBS_NUM_NODES ]];         then nodes=$PBS_NUM_NODES
    elif [[ -n $SLURM_JOB_NUM_NODES ]];   then nodes=$SLURM_JOB_NUM_NODES
    elif [[ ${OSTYPE:0:6} == "darwin" ]]; then nodes=1
    elif [[ $ranks -eq 1 ]];              then nodes=1
    else                                       nodes=2
    fi
  # ppn only specified, determine nodes and iterate
  elif [[ -n ranks ]]; then
    if [[ ${OSTYPE:0:6} == "darwin" ]]; then nodes=1
    else                                     nodes=2
    fi 
  # Nothing specified, determine ranks and iterate
  else
    if   [[ -n $PBS_NP ]]; then                ranks=$PBS_NP
    elif [[ -n $SLURN_NPROCS ]]; then          ranks=$SLURM_NPROCS
    elif [[ ${OSTYPE:0:6} == "darwin" ]]; then ranks=2
    else                                       ranks=4
    fi
  fi
done  


if [[ $ranks -ne $(($nodes * $ppn)) ]]; then errx "ranks ($ranks) != nodes ($nodes) x ppn ($ppn)"; fi

# set some convenient constants
cons_ki=1024
cons_mi=$((1024*1024))
cons_gi=$((1024*1024*1024))
cons_ti=$((1024*1024*1024*1024))

#
# Set blksz, nblk, nseg, nblkpseg, segsz from size.  Only some tests use segs.
# If size starts with a digit, then it has format:
#   totsz(MiB) [, blksz(KiB)] [,nseg]
# Otherwise, size is a letter t,s,m,l,x,y,z implying those values.
# Defaults:
#   letter: s
#   blksz: 1KiB
#   nseg: 10
#
if [[ $size == [[:digit:]]* ]]; then
  szarr=(${size//,/ })
  if [[ -n ${szarr[3]} ]]; then errx "too many elements in size: \"$size\""; fi
  totsz=$(( $cons_mi * ${szarr[0]} ))
  blksz=$(( $cons_ki * ${szarr[1]-1} ))
  nseg=${szarr[2]-10}
  if [[ -n ${szarr[3]} ]]; then synexit "too many elements in size: \"$size\""; fi
else
  case $size in
    t ) blksz=$((  1 * $cons_ki)); totsz=$((  10 * $cons_ki)); nseg=2;;
    s ) blksz=$(( 20 * $cons_ki)); totsz=$(( 160 * $cons_ki)); nseg=4;;
    m ) blksz=$((  1 * $cons_mi)); totsz=$(( 200 * $cons_mi)); nseg=8;;
    l ) blksz=$((  2 * $cons_mi)); totsz=$((   1 * $cons_gi)); nseg=16;;
    x ) blksz=$((  4 * $cons_mi)); totsz=$((   4 * $cons_gi)); nseg=24;;
    y ) blksz=$((  4 * $cons_mi)); totsz=$((   6 * $cons_gi)); nseg=28;;
    z ) blksz=$((  4 * $cons_mi)); totsz=$((   8 * $cons_gi)); nseg=32;;
    * ) synexit "invalid size $size";;
  esac
fi
nblk=$(($totsz / $blksz))
nblkpseg=$(($totsz / $nseg / $blksz))
segsz=$(($blksz * $nblkpseg))

# Check -w (dw_alloc_mode) option
case $dw_alloc_mode in
  0 ) ;;
  1 ) ;;
  2 ) ;;
  * ) synexit "invalid -w option $dw_alloc_mode";;
esac


# Following commands for actually running, i.e., not batch submission
if [[ $batch -eq 0 ]]; then
  # Add .lib dir to library path
  build=${BUILD_TREE:=$PWD/..}
  libs=$build/src/.libs

  if   [[ ${OSTYPE:0:6} == "darwin" ]]; then export DYLD_LIBRARY_PATH=$libs:$DYLD_LIBRARY_PATH
  elif [[ ${OSTYPE:0:5} == "linux" ]];  then export LD_LIBRARY_PATH=$libs:$LD_LIBRARY_PATH
  else errx "run_setup: OSTYPE \"$OSTYPE\" not recognized"; fi

  # Load module environment recorded at build
  mod_script="hiobuild.modules.bash"
  if [[ -e $BUILD_TREE/$mod_script ]]; then . $BUILD_TREE/$mod_script; fi 

  addifd() {
    if [[ $root_count -lt 2 && -d $1 ]]; then
      HIO_TEST_ROOTS="$HIO_TEST_ROOTS,posix:$1/hio_test$job_dir"
      root_count=$(($root_count + 1))
    fi
  }

  # If HIO_TEST_ROOTS not set, set up default
  if [[ -z $HIO_TEST_ROOTS ]]; then

    if [[ $dw_alloc_mode -eq 1 ]]; then
      if [[ -z $HIO_datawarp_root ]]; then
        if [[ $hostpre == "tt-" ]]; then
          # Late DW Ph 1 - location of manually allocated BB directory
          export HIO_datawarp_root="/tmp/dw_scr"
        else
          synexit "dw_alloc_mode=1 and HIO_datawarp_root not set"
        fi  
      fi
      # HIO_datawarp_root set, add LOGNAME and job_dir if needed
      if [[ ${HIO_datawarp_root/$LOGNAME} == $HIO_datawarp_root ]]; then
        HIO_datawarp_root="$HIO_datawarp_root/$LOGNAME" 
      fi
      if [[ -n $job_dir && ${HIO_datawarp_root/$job_dir} == $HIO_datawarp_root ]]; then
        HIO_datawarp_root="$HIO_datawarp_root$job_dir" 
      fi
    fi

    root_count=0;
    if [[ $dw_alloc_mode -eq 1 || $dw_alloc_mode -eq 2 ]]; then
      HIO_TEST_ROOTS="DataWarp"
      root_count=$(($root_count + 1))
    fi

    addifd "/lscratch1/$LOGNAME"
    addifd "/lscratch2/$LOGNAME"
    addifd "/lscratch3/$LOGNAME"
    addifd "/lscratch4/$LOGNAME"
    addifd "/lustre/scratch3/$LOGNAME"  
    addifd "/lustre/scratch4/$LOGNAME"  
    addifd "/lustre/scratch5/$LOGNAME"
    addifd "/scratch1/$LOGNAME"
    addifd "/scratch1/users/$LOGNAME"
    addifd "/lustre/scratch1/yellow/$LOGNAME"
    addifd "$HOME/scratch-tmp"
    if [[ ${HIO_TEST_ROOTS:0:1} == "," ]]; then HIO_TEST_ROOTS=${HIO_TEST_ROOTS:1}; fi
  fi

  # Special hack for buffy - since no PFS, inhibit staging for sizes larger than tiny
  if [[ $hostpre == "bu-" && $size != "t" ]]; then
    msg "Buffy with size > tiny, disabling datawarp staging"
    export HIO_datawarp_stage_mode="disable"
  fi

  # Display results of run_setup
  msg "run_setup:                      Args: \"$args\""
  msg "run_setup:                       PWD: \"$PWD\""
  msg "run_setup:                     build: \"$build\""
  msg "run_setup:                      libs: \"$libs\""
  msg "run_setup:                    mpicmd: \"$mympicmd\""
  msg "run_setup:           nodes/ranks/ppn: $nodes / $ranks / $ppn"
  msg "run_setup:                      size: \"$size\""
  msg "run_setup:               totsz/blksz: $(cvt $totsz) / $(cvt $blksz)"
  msg "run_setup:        nblk/nseg/nblkpseg: $(cvt $nblk) / $(cvt $nseg) / $(cvt $nblkpseg)"
  msg "run_setup:    verbose/debug/dw_alloc: $verbose_lev / $debug_lev / $dw_alloc_mode"

  # Pretty print all HIO_ variables
  for var in ${!HIO_*}; do
    msg "run_setup: $(printf '%*s: "%s"' 25 $var ${!var})"
  done 

  if [[ -z $HIO_TEST_ROOTS ]]; then msg "Warning: HIO_TEST_ROOTS not set or defaulted"; fi

fi

# --- end of run_setup ---
